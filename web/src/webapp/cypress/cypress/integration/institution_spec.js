/// <reference types="Cypress" />
context('Institution', () => {

  beforeEach(() => {
    cy.login();
    cy.navigateToList("data","institutions");
  })

  it('should check institution list page ', () => {
    // Check the page title
    cy.get('legend > div').first().should('contain','Etablissements');
    // Check that at least one institution is already present in the list
    cy.get('tr>td>a').its('length').should('be.greaterThan',0)
    // check the presence of the button for adding a new institution
    cy.get('#btn-add').should('exist');
  })

  /**
   * Create a new institution. In the current version the institution reference and label are the only parameter that can be changed.
   * @param string reference : the institution reference
   * @param string label : the institution label
   */
  function createNewInstitution(reference,label){
    cy.get('tr>td>a').contains(reference).should('not.exist')

    // Reach the page for a new institution creation
    cy.get('#btn-add').click();
    cy.get('legend').should('contain','Nouvel Ã©tablissement');
    cy.get('#btn-save').should('be.disabled')
    // Set the reference
    cy.get(':nth-child(2) > .col-md-4 > input').should('not.have.class', 'ng-valid')
    cy.get(':nth-child(2) > .col-md-4 > input').should('have.class', 'ng-invalid')
    cy.get(':nth-child(2) > .col-md-4 > input').type(reference);
    cy.get(':nth-child(2) > .col-md-4 > input').should('not.have.class', 'ng-invalid')
    cy.get(':nth-child(2) > .col-md-4 > input').should('have.class', 'ng-valid')
    // Set the label
    cy.get(':nth-child(3) > .col-md-10 > input').should('not.have.class', 'ng-valid')
    cy.get(':nth-child(3) > .col-md-10 > input').should('have.class', 'ng-invalid')
    cy.get(':nth-child(3) > .col-md-10 > input').type(label);
    cy.get(':nth-child(3) > .col-md-10 > input').should('not.have.class', 'ng-invalid')
    cy.get(':nth-child(3) > .col-md-10 > input').should('have.class', 'ng-valid')
    // Status choice : active
    cy.get(':nth-child(4) > .col-md-4 > .ng-select > .ng-select-container > .ng-value-container > .ng-input > input').click()
    cy.get('.ng-dropdown-panel-items .ng-option').first().click()
    cy.get('#btn-save').should('not.be.disabled')
    // Now we want to draw a marker on the map.
    // First, move the map to an adress of interest
    cy.get('.leaflet-control-geocoder-icon').click()
    cy.get('.leaflet-control-geocoder-form >input').should('be.visible')
    cy.get('.leaflet-control-geocoder-form >input').type('Vaulx-en-Velin')
    cy.get('.leaflet-control-geocoder-form >input').type('{enter}')
    cy.get('.leaflet-control-geocoder-alternatives').should('be.visible')
    cy.get('.leaflet-control-geocoder-alternatives > li > a').first().click()
    // Then activate the marker drawing mode
    cy.get('.leaflet-draw-draw-marker').click()
    // Note :
    //   In order to trigger a click on the map so as to put a marker on it, a first attempt is
    //     using cy.get('.leaflet-container').click() instruction, but it seems to be effectless.
    //   As an alternative, we want to click on the geocoder marker.
    //   So as to avoid mismatch between the geocoder marker and the
    //     drawing marker (marker that is temporarilly generated by leaflet-draw and that is following the
    //     mouse pointer for animation purpose) we prefer click on the geocoder marker shadow.
    //   Last thing, since the geocoder marker shadow may be hidden by the temporary drawing marker, we have
    //     to force the click on the marker shadow.
    cy.get('.leaflet-shadow-pane > img').first().click({ force: true })
    cy.get('.modal-dialog').should('exist')
    cy.get(':nth-child(1) > .col-lg-8 > .form-control').should('exist')
    cy.get(':nth-child(1) > .col-lg-8 > .form-control').type(label)
    // Add a service duration
    cy.get(':nth-child(6) > .col-lg-8 > .input-group > .form-control').clear();
    cy.get(':nth-child(6) > .col-lg-8 > .input-group > .form-control').type('7');
    cy.get('.pull-right > .btn-success').should('not.be.disabled')
    cy.get('.pull-right > .btn-success').click()
    cy.get('#btn-save').should('not.be.disabled')
    cy.get('#btn-save').click();
    cy.get('.h5').should('contain','Etablissement '+reference);
  }

  it('should create a new institution', () => {
    createNewInstitution('Etablissement_test','Etablissement test')
  })

  /**
   * Assuming we are in the institution list menu, navigate to a institution crud
   * @param string reference : the institution reference
   */
  function navigateToCrud(reference){
    cy.get('tr>td>a').contains(reference).should('exist')
    cy.get('tr>td>a').contains(reference).click();
    cy.get('.h5').should('contain','Etablissement '+reference);
  }

  it('should update an existing institution', () => {
    // Retrieve the test institution
    navigateToCrud('Etablissement_test')
    // Enter edit mode
    cy.get('#btn-edit').click()
    // Change the description
    cy.get(':nth-child(3) > .col-md-10 > input').clear().type('Etablissement test...');
    cy.get('#btn-save').should('not.be.disabled')
    cy.get('#btn-save').click();
    // Go back to list menu
    cy.get('#btn-list').click();
  });

  it('should check changes in an institution', () => {
    // Retrieve the test institution
    navigateToCrud('Etablissement_test')
    // Enter edit mode
    cy.get('#btn-edit').click()
    cy.get('#btn-save').should('not.be.disabled')
    // Cancel after no modification
    cy.get('#btn-cancel').click();
    cy.get('#btn-save').should('not.exist')
    // Enter edit mode again
    cy.get('#btn-edit').click()
    cy.get('#btn-save').should('not.be.disabled')
    // Cancel after a modification : a confirmation should be requested
    cy.get(':nth-child(4) > .col-md-4 > .ng-select > .ng-select-container > .ng-value-container > .ng-input > input').click()
    cy.get('.ng-dropdown-panel-items .ng-option').first().next().click()
    cy.get('#btn-cancel').click();
    cy.get('.modal-footer .btn-success').click();
    cy.get('#btn-save').should('not.exist')
  });

  it('should hard delete an existing institution', () => {
    // Retrieve the test institution
    navigateToCrud('Etablissement_test')
    // Enter edit mode (we can not delete an item from view mode)
    cy.get('#btn-edit').click()
    cy.get('#btn-delete').click()
    // Confirm the deletion : we perform a hard deletion, otherwise we will not be able to play the test again
    cy.get('#chkDelete').click()
    cy.get('.modal-footer .btn-success').click()
    // Back in the list menu, check that the institution was removed
    cy.get('legend > div > :nth-child(1)').should('contain','Etablissements');
    cy.get('tr>td>a').contains('Etablissement_test').should('not.exist')
  });

  it('should mark an institution as removed', () => {
    // Create a random number between 10000 and 19999
    var reference = 'test_'+(10000+Math.floor((Math.random() * 10000)));
    createNewInstitution(reference,"Random test establishement");
    cy.navigateToList("data","institutions");
    // Retrieve the test institution
    navigateToCrud(reference)
    // Enter edit mode (we can not delete an item from view mode)
    cy.get('#btn-edit').click()
    cy.get('#btn-delete').click()
    // Confirm the deletion : we perform a shallow deletion
    cy.get('.modal-footer .btn-success').click()
    // Back in the list menu, check that the institution was removed
    cy.get('legend > div > :nth-child(1)').should('contain','Etablissements');
    cy.get('tr>td>a').contains(reference).should('not.exist')
  });

})
  